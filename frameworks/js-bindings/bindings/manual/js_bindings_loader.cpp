/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_js_bindings.py -c system_jsb.ini" on 2012-12-17
* Script version: v0.5
*/
#include "js_bindings_loader.h"
#include "js_bindings_config.h"
#include "js_bindings_core.h"
#include "js_manual_conversions.h"
#include "ScriptingCore.h"
#include "jni/JniHelper.h"

USING_NS_CC;
jsval callbackfunc;
JSObject *thisobj;
extern "C"{

//    JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxActivity_nativePreloadResponse(JNIEnv*  env,jobject thiz,jboolean isfinish , jfloat percent)
    JNIEXPORT void JNICALL Java_com_chukong_cocosruntime_core_CocosRuntimePreload_nativePreloadResponse(JNIEnv*  env,jobject thiz, jboolean isCompleted, jint bytesWritten, jint totalSize)
    {
        float percent = 100.0f * bytesWritten / totalSize;
        log("callback from nativePreloadResponse...: isfinish: %d, percent: %f", isCompleted, percent);
        jsval retval;
        jsval valArr[2];
        valArr[0] = BOOLEAN_TO_JSVAL(isCompleted);
        valArr[1] = DOUBLE_TO_JSVAL(percent);
        JSContext* cx = ScriptingCore::getInstance()->getGlobalContext();
        JS_AddValueRoot(cx, valArr);
        JSB_AUTOCOMPARTMENT_WITH_GLOBAL_OBJCET
        JS_CallFunctionValue(cx, thisobj, callbackfunc, 2, valArr, &retval);
        JS_RemoveValueRoot(cx, valArr);
        log("callback from nativePreloadResponse end...");
    }
}

void callJavaPreload(std::string str)
{
    JniMethodInfo t;
    if (JniHelper::getStaticMethodInfo(t, "com/chukong/cocosruntime/core/CocosRuntimePreload", "preloadFromNative", "(Ljava/lang/String;)V")) {
        t.env->CallStaticVoidMethod(t.classID, t.methodID, t.env->NewStringUTF(str.c_str()));
        t.env->DeleteLocalRef(t.classID);
    }
}

bool JSB_preloadSource(JSContext *cx, uint32_t argc, jsval *vp) {
    JSB_PRECONDITION2( argc == 3, cx, false, "JSB_preloadSource Invalid number of arguments" );
    jsval *argvp = JS_ARGV(cx,vp);
    bool ok = true;
    JSObject *obj = JS_THIS_OBJECT(cx, vp);
    std::string arg0;
    ok &= jsval_to_std_string(cx, argvp[0], &arg0);
    callbackfunc = argvp[1];
    thisobj = JSVAL_TO_OBJECT(argvp[2]);
    JSB_PRECONDITION2(ok, cx, false, "Error processing arguments");
    JS_AddNamedValueRoot(cx, &callbackfunc, "cc.loader callback");
    JS_AddNamedObjectRoot(cx, &thisobj, "cc.loader callback");
    callJavaPreload(arg0);
    JS_SET_RVAL(cx, vp, JSVAL_VOID);
    return true;
}

void jsb_register_preloadSource( JSContext *_cx, JSObject *object)
{
    JSObject *sys = JS_NewObject(_cx, NULL, NULL, NULL);
    JS::RootedValue systemVal(_cx);
    systemVal = OBJECT_TO_JSVAL(sys);
    JS_SetProperty(_cx, object, "runtime", systemVal);
    JS_DefineFunction(_cx, sys, "preload", JSB_preloadSource, 3, JSPROP_READONLY | JSPROP_PERMANENT | JSPROP_ENUMERATE );     
}
//#endif // JSB_INCLUDE_SYSTEM
